{"ast":null,"code":"var _jsxFileName = \"D:\\\\CDAC-SIEM\\\\siem\\\\src\\\\components\\\\siem-piechart.jsx\";\nimport React, { useState } from 'react';\nimport Chart from 'react-google-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SiemDonutChart = () => {\n  // Mock data\n  const mockPieChartData = {\n    rule_description: ['Low', 'Medium', 'High'],\n    bg_count: [30, 50, 20],\n    Color_codes: ['#00ff00', '#ffcc00', '#ff0000'],\n    status: 'Success'\n  };\n  function capitalizeEveryWord(string) {\n    return string.replace(/\\b\\w/g, word => word.toUpperCase());\n  }\n  const chartData = mockPieChartData.Color_codes ? [['Color', 'Count']].concat(mockPieChartData.rule_description.map((color, index) => [capitalizeEveryWord(color), mockPieChartData.bg_count[index]])) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mockPieChartData.status === 'Success' && mockPieChartData.Color_codes ? /*#__PURE__*/_jsxDEV(Chart, {\n      width: '550px',\n      height: '400px',\n      chartType: \"PieChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }, this),\n      data: chartData,\n      options: {\n        title: '',\n        padding: '0px',\n        backgroundColor: 'transparent',\n        legend: {\n          position: 'bottom',\n          textStyle: {\n            fontSize: 15,\n            whiteSpace: 'nowrap'\n          }\n        },\n        pieHole: 0.4 // This creates a donut chart\n      },\n      rootProps: {\n        'data-testid': '1'\n      },\n      chartArea: {\n        width: '50%',\n        left: '40%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = SiemDonutChart;\nexport default SiemDonutChart;\nvar _c;\n$RefreshReg$(_c, \"SiemDonutChart\");","map":{"version":3,"names":["React","useState","Chart","jsxDEV","_jsxDEV","SiemDonutChart","mockPieChartData","rule_description","bg_count","Color_codes","status","capitalizeEveryWord","string","replace","word","toUpperCase","chartData","concat","map","color","index","children","width","height","chartType","loader","fileName","_jsxFileName","lineNumber","columnNumber","data","options","title","padding","backgroundColor","legend","position","textStyle","fontSize","whiteSpace","pieHole","rootProps","chartArea","left","_c","$RefreshReg$"],"sources":["D:/CDAC-SIEM/siem/src/components/siem-piechart.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Chart from 'react-google-charts';\r\n\r\nconst SiemDonutChart = () => {\r\n  // Mock data\r\n  const mockPieChartData = {\r\n    rule_description: ['Low', 'Medium', 'High'],\r\n    bg_count: [30, 50, 20],\r\n    Color_codes: ['#00ff00', '#ffcc00', '#ff0000'],\r\n    status: 'Success',\r\n  };\r\n\r\n  function capitalizeEveryWord(string) {\r\n    return string.replace(/\\b\\w/g, (word) => word.toUpperCase());\r\n  }\r\n\r\n  const chartData = mockPieChartData.Color_codes\r\n    ? [['Color', 'Count']].concat(\r\n        mockPieChartData.rule_description.map((color, index) => [\r\n          capitalizeEveryWord(color),\r\n          mockPieChartData.bg_count[index],\r\n        ])\r\n      )\r\n    : [];\r\n\r\n  return (\r\n    <div>\r\n      {mockPieChartData.status === 'Success' && mockPieChartData.Color_codes ? (\r\n        <Chart\r\n          width={'550px'}\r\n          height={'400px'}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={chartData}\r\n          options={{\r\n            title: '',\r\n            padding: '0px',\r\n            backgroundColor: 'transparent',\r\n            legend: {\r\n              position: 'bottom',\r\n              textStyle: {\r\n                fontSize: 15,\r\n                whiteSpace: 'nowrap',\r\n              },\r\n            },\r\n            pieHole: 0.4, // This creates a donut chart\r\n          }}\r\n          rootProps={{ 'data-testid': '1' }}\r\n          chartArea={{ width: '50%', left: '40%' }}\r\n        />\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiemDonutChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B;EACA,MAAMC,gBAAgB,GAAG;IACvBC,gBAAgB,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;IAC3CC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACtBC,WAAW,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IAC9CC,MAAM,EAAE;EACV,CAAC;EAED,SAASC,mBAAmBA,CAACC,MAAM,EAAE;IACnC,OAAOA,MAAM,CAACC,OAAO,CAAC,OAAO,EAAGC,IAAI,IAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;EAC9D;EAEA,MAAMC,SAAS,GAAGV,gBAAgB,CAACG,WAAW,GAC1C,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAACQ,MAAM,CACzBX,gBAAgB,CAACC,gBAAgB,CAACW,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK,CACtDT,mBAAmB,CAACQ,KAAK,CAAC,EAC1Bb,gBAAgB,CAACE,QAAQ,CAACY,KAAK,CAAC,CACjC,CACH,CAAC,GACD,EAAE;EAEN,oBACEhB,OAAA;IAAAiB,QAAA,EACGf,gBAAgB,CAACI,MAAM,KAAK,SAAS,IAAIJ,gBAAgB,CAACG,WAAW,gBACpEL,OAAA,CAACF,KAAK;MACJoB,KAAK,EAAE,OAAQ;MACfC,MAAM,EAAE,OAAQ;MAChBC,SAAS,EAAC,UAAU;MACpBC,MAAM,eAAErB,OAAA;QAAAiB,QAAA,EAAK;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAE;MACjCC,IAAI,EAAEd,SAAU;MAChBe,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,KAAK;QACdC,eAAe,EAAE,aAAa;QAC9BC,MAAM,EAAE;UACNC,QAAQ,EAAE,QAAQ;UAClBC,SAAS,EAAE;YACTC,QAAQ,EAAE,EAAE;YACZC,UAAU,EAAE;UACd;QACF,CAAC;QACDC,OAAO,EAAE,GAAG,CAAE;MAChB,CAAE;MACFC,SAAS,EAAE;QAAE,aAAa,EAAE;MAAI,CAAE;MAClCC,SAAS,EAAE;QAAEpB,KAAK,EAAE,KAAK;QAAEqB,IAAI,EAAE;MAAM;IAAE;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,gBAEFzB,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACe,EAAA,GApDIvC,cAAc;AAsDpB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}